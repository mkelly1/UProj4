version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:12}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:12}
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:12}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
    # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 ));
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build-{{ .BuildNum }}
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            cd dist
            ls
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-{{ .BuildNum }}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build-{{ .BuildNum }}
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-{{ .BuildNum }}

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build-{{ .BuildNum }}
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build-{{ .BuildNum }}
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build-{{ .BuildNum }}
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build-{{ .BuildNum }}
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: yum install tar
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=proj4 \
              --tags name=backend \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:12}" \
              --region=us-west-2 \
              --parameter-overrides \
                ID="67k9i1f1" \
                VPCID="vpc-0caf7189e77171517" \
                EC2Subnet="subnet-0c2689f69a40847fd"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=proj4 \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:12}" \
              --parameter-overrides ID="67k9i1f1" \
              --region=us-west-2
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws --region us-west-2 \
              ec2 describe-instances \
              --filters "Name=tag:project,Values=proj4" \
              --query 'Reservations[*].Instaces[*].[PublicIpAddress]' \
              --output text >> inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ee:90:b8:ab:8a:57:f1:36:9a:ea:20:5c:8d:ae:b6:e7"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache tar gzip
            apk add --update ansible npm nodejs
            pip install awscli 
      - run:
          name: Configure server
          command: |
            cd ~/.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build-{{ .BuildNum }}
      - run:
          name: Run migrations
          command: |
            cd backend
            sudo npm install
            sudo npm run migrations > migration-status
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" migration-status
            then
              curl -H "Content-Type: text/plain" -H "token: a69d49ff-fa6e-4f73-86ad-ae03427eb4eb" --request PUT --data "success" https://api.memstash.io/values/
            else
              curl -H "Content-Type: text/plain" -H "token: a69d49ff-fa6e-4f73-86ad-ae03427eb4eb" --request PUT --data "fail" https://api.memstash.io/values/
            
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:12}" 

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo npm install
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_DNS}:3000"
            echo "${API_URL}"
            sudo npm build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp ./dist s3://udapeople-67k9i1f1/ --recursive
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/frontend/dist
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ee:90:b8:ab:8a:57:f1:36:9a:ea:20:5c:8d:ae:b6:e7"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible npm nodejs curl
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
